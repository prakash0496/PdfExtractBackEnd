package com.ExcelImport.PdfToExcel.service.ExtractService;

import com.ExcelImport.PdfToExcel.dto.HdfcBankTransactionDTO;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;

@Service
public class HdfcBankStatementService {

    public String extractTextFromPdf(byte[] pdfBytes, String password) throws Exception {
        try (PDDocument document = PDDocument.load(new ByteArrayInputStream(pdfBytes), password)) {
            PDFTextStripper pdfStripper = new PDFTextStripper();
            pdfStripper.setSortByPosition(true); // Keep text in reading order
            return pdfStripper.getText(document);
        } catch (org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException e) {
            throw new Exception("PDF is password-protected or password is incorrect.");
        }
    }

    public List<HdfcBankTransactionDTO> extractHdfcTransaction(String ocrText) {
        List<HdfcBankTransactionDTO> transactions = new ArrayList<>();
        String datePattern = "(\\d{2}/\\d{2}/\\d{2}|\\d{2}-\\d{2}-\\d{4})";

        String ignorePattern = "(?i).*STATEMENT SUMMARY.*"
                + "|.*Generated On:.*"
                + "|.*Generated By:.*"
                + "|.*Requesting Branch Code:.*"
                + "|.*This is a computer generated statement.*"
                + "|.*HDFC BANK LIMITED.*"
                + "|.*Closing balance includes funds earmarked.*"
                + "|.*Contents of this statement.*"
                + "|.*Registered Office Address:.*"
                + "|.*https?://.*"
                + "|.*Opening Balance.*"
                + "|.*Dr Count.*"
                + "|.*Cr Count.*"
                + "|.*GSTN.*"
                + "|.*not require signature.*";

        String[] lines = ocrText.split("\\r?\\n");
        HdfcBankTransactionDTO currentTx = null;
        StringBuilder descBuilder = new StringBuilder();

        double openingBalance = 0.0;
        List<List<Double>> transactionNumbers = new ArrayList<>();
        boolean inTransactionTable = false;

        for (String line : lines) {
            line = line.trim();
            if (line.isEmpty()) continue;

            // Detect the start of transaction table
            if (line.contains("Date Narration Chq./Ref.No.")) {
                inTransactionTable = true;
                continue; // skip header
            }

            // Stop at statement summary
            if (line.toLowerCase().contains("statement summary")) {
                inTransactionTable = false;
                break; // no further processing
            }

            if (!inTransactionTable) continue; // ignore any line outside table

            line = line.replaceAll("[|=@]", " ").replaceAll("\\s+", " ").trim();

            // Start of a new transaction
            if (line.matches("^" + datePattern + ".*")) {

                // Save previous transaction
                if (currentTx != null) {
                    currentTx.setDescription(descBuilder.toString().trim());
                    transactions.add(currentTx);
                }

                currentTx = new HdfcBankTransactionDTO();
                descBuilder = new StringBuilder();

                String[] parts = line.split("\\s+");
                currentTx.setTransactionDate(parts[0]);

                // Value date
                String valueDate = null;
                for (int i = 1; i < parts.length; i++) {
                    if (parts[i].matches(datePattern)) {
                        valueDate = parts[i];
                        break;
                    }
                }
                currentTx.setValueDate(valueDate != null ? valueDate : parts[0]);

                List<Double> nums = new ArrayList<>();
                String chequeNo = "-";

                 // Iterate over each part of the line
                for (int i = 0; i < parts.length; i++) {
                    String clean = parts[i].replace(",", "").trim();

                    // Check for alphanumeric cheque/reference numbers
                    // Example pattern: starts with letters (optional) followed by 6+ digits
                    if (clean.matches("[A-Za-z]*\\d{6,}[A-Za-z0-9]*")) {
                        if (chequeNo.equals("-")) {
                            chequeNo = clean;
                        } else {
                            // If already found, append next part (multi-line)
                            chequeNo += clean;
                        }
                    }
                    // Numeric amounts (Withdrawal, Deposit, Balance)
                    else if (clean.matches("\\d+(\\.\\d+)?")) {
                        nums.add(Double.parseDouble(clean));
                    }
                }

                  // Save results
                transactionNumbers.add(nums);
                currentTx.setChequeNo(chequeNo);



                // Build description until first numeric or unwanted keyword
                for (int i = 1; i < parts.length; i++) {
                    String token = parts[i].trim();
                    if (token.matches("\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?")) break;
                    if (token.equals(valueDate) || token.equals(chequeNo)) break;
                    if (token.matches("(?i)(statement|summary|opening|closing|balance|generated|requesting|branch|dr|cr|count|this|address|GSTIN|HDFC).*"))
                        break;
                    descBuilder.append(token).append(" ");
                }

            } else {
                // Continuation line of description inside transaction table
                if (currentTx != null) {
                    // Skip any line with numeric totals or unwanted keywords
                    if (!line.matches(".*\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?") &&
                            !line.toLowerCase().contains("statement summary") &&
                            !line.toLowerCase().contains("opening balance") &&
                            !line.toLowerCase().contains("closing balance")) {
                        descBuilder.append(line).append(" ");
                    }
                }
            }
        }

        // Add last transaction
        if (currentTx != null) {
            currentTx.setDescription(descBuilder.toString().trim());
            transactions.add(currentTx);
        }

        // Step 3: Infer debit/credit/balance
        double prevBalance = openingBalance;
        for (int i = 0; i < transactions.size(); i++) {
            HdfcBankTransactionDTO tx = transactions.get(i);
            List<Double> nums = (i < transactionNumbers.size()) ? transactionNumbers.get(i) : new ArrayList<>();
            double debit = 0, credit = 0, balance = prevBalance;

            if (nums.size() == 3) {
                debit = nums.get(0);
                credit = nums.get(1);
                balance = nums.get(2);
            } else if (nums.size() == 2) {
                double first = nums.get(0);
                double second = nums.get(1);
                if (second > prevBalance) {
                    credit = second - prevBalance;
                    balance = second;
                } else if (second < prevBalance) {
                    debit = prevBalance - second;
                    balance = second;
                } else {
                    balance = second;
                }
            } else if (nums.size() == 1) {
                double first = nums.get(0);
                if (first < prevBalance) {
                    debit = prevBalance - first;
                    balance = first;
                } else {
                    credit = first - prevBalance;
                    balance = first;
                }
            }

            tx.setDebit(debit == 0 ? "-" : String.format("%.2f", debit));
            tx.setCredit(credit == 0 ? "-" : String.format("%.2f", credit));
            tx.setBalance(String.format("%.2f", balance));

            prevBalance = balance;
        }

        return transactions;
    }

    public static class InduslndBankStatementService {
    }
}
